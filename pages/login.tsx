import React, { useState, useRef } from 'react';
import {FormProvider, useForm} from "react-hook-form";
import Link from 'next/link';
import Head from 'next/head';

import { Toast } from 'primereact/toast';

import { InputWrapper } from '../components/react-hook-form/input-wrapper';
import { Label } from '../components/react-hook-form/label';
import { Input } from '../components/react-hook-form/input';
import { ErrorMessage } from '../components/react-hook-form/error-message';
import Spinner from '../components/spinner';
import { Divider } from 'primereact/divider';

import { Auth } from '@/hooks/auth';
import { GoogleOAuthProvider, GoogleLogin, CredentialResponse } from '@react-oauth/google';
import { useRouter } from 'next/router';
import MenuBar from '@/components/menuBar';
import { Button } from 'primereact/button';


export type FormProps = {
    email: string;
    password: string;
}

const Login: React.FC = () => {

    const { login, googleLogin } = Auth();

    const toast = useRef<Toast>(null);
    const [loading, setLoading] = useState<boolean>(false);

    const router = useRouter();

    const methods = useForm<FormProps>({
        defaultValues: {
            email: '',
            password: '',
        },
    });

    const {
        handleSubmit,
        setError,
        formState: {errors},
    } = methods;

    const onSubmit = (formData: FormProps) => {
        setLoading(true);
        if([formData.email, formData.password].includes('')) {
            onErrors();
            return
        } else {
            login(formData, toast, setLoading);
        }
    };

    const onErrors = () => {
        toast.current!.show({severity:'error', summary:'Error', detail: 'User and/or password are not correct', life: 4000});
    };

    function handleError() {
        console.log('Login failed')
    }

    const handleSuccess = async (credentialResponse: CredentialResponse) => {
        setLoading(true);
        try {
            const response = await googleLogin(credentialResponse);
            if(response.status == 200) {
                console.log(response)
                if(response.data.newUser == true || response.data.user.check_steps == false) {
                    router.push('/preferences');
                } else {
                    if(response.data.user.role_description == 'CUSTOMER') {
                        router.push('/category/detailing');
                    }
                    router.push('/welcome/profile');
                }
    
                setLoading(false);
            }
        } catch (error) {
            console.log(error)
        }
    }

  return (
    <>
        <GoogleOAuthProvider clientId="376843512756-0sue8frqribicc3m7q5ib5ss4m7jkslg.apps.googleusercontent.com">
            <script src="https://accounts.google.com/gsi/client" async defer></script>
            <Head>
                <title>BoatMate</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" type="image/png" href="/Biggest_BoatMate-removebg-preview.ico" />
            </Head>
            <Spinner loading={loading} />
            <Toast ref={toast} />
            <MenuBar linkMenu='Join Our Pro Network' urlMenu='/pro' setLoading={setLoading}/>
            <div className='w-full h-screen flex flex-col md:flex-row items-center justify-center overflow-hidden'>
                <div className='w-[90%] md:w-[60%] border rounded-lg shadow-xl grid grid-cols-1 md:grid-cols-2'>
                    <div className='p-5 col-span-1'>
                        <p className='text-indigo-900 text-xl font-medium leading-9'>Sign In</p>
                        <p className='text-neutral-600 leading-9 text-sm'>fill the fields for continue</p>
                        <FormProvider {...methods}>
                            <form onSubmit={handleSubmit(onSubmit, onErrors)} className="w-full mt-3">
                                <div className="grid grid-cols-1 gap-5">
                                    <InputWrapper outerClassName="col-span-1">
                                            <Input
                                                id='email'
                                                name='email'
                                                type='email'
                                                placeholder='Email'
                                                rules={{required: "Email is required"}}
                                            />
                                        {errors?.email?.message && (
                                            <ErrorMessage>{errors.email.message}</ErrorMessage>
                                        )}
                                    </InputWrapper>
                                    <InputWrapper outerClassName="col-span-1">
                                            <Input
                                                id='password'
                                                name='password'
                                                type='password'
                                                placeholder='Password'
                                                rules={{required: "Password is required"}}
                                            />
                                        {errors?.password?.message && (
                                            <ErrorMessage>{errors.password.message}</ErrorMessage>
                                        )}
                                    </InputWrapper>
                                </div>
                                
                                <p className='text-neutral-600 text-sm text-center my-5'>- or -</p>

                                <div className='w-full flex flex-row justify-center'>
                                    <GoogleLogin onError={handleError} onSuccess={handleSuccess} />
                                </div>

                                <div className="w-full my-7 flex items-center justify-end">
                                    <Link
                                        className='text-xs lg:text-sm font-medium text-indigo-900 hover:underline'
                                        href={'/forgot'}>
                                            Forgot password?
                                    </Link>
                                </div>
                                <Button type='submit' label='SIGN IN' className='w-full p-3 border-none bg-gradient-to-r from-sky-600 to-sky-300 hover:to-sky-400 shadow-lg shadow-sky-300/50 text-white text-sm lg:text-base rounded-xl' />
                            </form>
                        </FormProvider>
                    </div>
                    <div className='hidden md:col-span-1 h-[450px] md:flex items-center justify-center overflow-hidden'>
                        <img 
                        src="https://s3-alpha-sig.figma.com/img/1a3f/69d3/e2ffbce11a16ded3bbb8c0e28b7f75eb?Expires=1693180800&Signature=RsM1Ob-BGifavlrAyEqnuV54WWx~Zy6~HuWMKsbgov4R-8pEkliRV9bZMVJ85nBNWfIIeR7B9wP03~DEIjJmz-WQLZLl07CXZHRqZ8YyvnRLaPlH3H-Qf8eyMLzMSDu76BcZGfuVasv2921gvs-FqykDuQXpJwWwDJpFGmCO-nAXGDq7zhRnpi0bO--~It2UOfhNbJC3jmZL0P5FGZi1Hu5cqvL16jIcT1mLYQJtlWPnMVOYgx3Qk3HTjC6pHKQB6cbB1pyOBiIOguRQGidXdS4qkoX78POxwOtbfNzO7ZvCrf9L6McbYQECjDWc~RPl69YI7AgTs9JWdFZMyIuyBg__&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4" 
                        alt="boat"
                        className='w-full object-cover' />
                    </div>
                </div>
            </div>
        </GoogleOAuthProvider>
    </>
  )
}

export default Login